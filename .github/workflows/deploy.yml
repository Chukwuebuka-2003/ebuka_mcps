name: Build and Deploy Container Apps

on:
  push:
    branches:
      - main # Trigger on push to the main branch

env:
  AZURE_ACR_NAME: aitutoracr 
  AZURE_RG: ai-tutor-rg
  LOCATION: eastus
  ACA_ENVIRONMENT: aca-ai-tutor-env

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository code
      - uses: actions/checkout@v4

      # 1. Log in to Azure with the service principal secret
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      # 2. Get ACR credentials for Docker login
      - name: Get ACR Credentials
        id: acr_creds
        run: |
          echo "Retrieving ACR credentials for login..."
          ACR_USERNAME=$(az acr credential show -n ${{ env.AZURE_ACR_NAME }} --query 'username' -o tsv)
          ACR_PASSWORD=$(az acr credential show -n ${{ env.AZURE_ACR_NAME }} --query 'passwords[0].value' -o tsv)
          # Pass credentials as output to the next step
          echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_OUTPUT

      # 3. Docker Login to Azure Container Registry
      - name: Docker Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.AZURE_ACR_NAME }}.azurecr.io
          username: ${{ steps.acr_creds.outputs.ACR_USERNAME }}
          password: ${{ steps.acr_creds.outputs.ACR_PASSWORD }}

      # 4. Build and Push the 'mcp-host' image
      - name: Build and Push mcp-host
        uses: docker/build-push-action@v5
        with:
          context: ./ 
          file: ./Dockerfile.mcp_host
          push: true
          tags: |
            ${{ env.AZURE_ACR_NAME }}.azurecr.io/mcp-host:latest
            ${{ env.AZURE_ACR_NAME }}.azurecr.io/mcp-host:${{ github.sha }}

      # 5. Build and Push the 'rag-server' image
      - name: Build and Push rag-server
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile.rag_server
          push: true
          tags: |
            ${{ env.AZURE_ACR_NAME }}.azurecr.io/rag-server:latest
            ${{ env.AZURE_ACR_NAME }}.azurecr.io/rag-server:${{ github.sha }}

      # 6. Deploy RAG Server Container App (Internal Service)
      - name: Deploy RAG Server to ACA
        uses: azure/container-apps-deploy-action@v1
        with:
          resourceGroup: ${{ env.AZURE_RG }}
          containerAppEnvironment: ${{ env.ACA_ENVIRONMENT }}
          containerAppName: rag-mcp-server 
          imageToDeploy: ${{ env.AZURE_ACR_NAME }}.azurecr.io/rag-server:${{ github.sha }}
          acrName: ${{ env.AZURE_ACR_NAME }}
          acrUsername: ${{ steps.acr_creds.outputs.ACR_USERNAME }}
          acrPassword: ${{ steps.acr_creds.outputs.ACR_PASSWORD }}
          targetPort: 9000
          
      # 7. Deploy MCP Host Container App (Public Endpoint) using AZ CLI
      - name: Deploy MCP Host and Set Environment Variables
        shell: bash
        run: |
          az containerapp update \
            --name mcp-host \
            --resource-group ${{ env.AZURE_RG }} \
            --image ${{ env.AZURE_ACR_NAME }}.azurecr.io/mcp-host:${{ github.sha }} \
            --container-name mcp-host \
            --set 'template.containers[0].env=[
              { "name": "POSTGRES_USER", "value": "${{ secrets.POSTGRES_USER }}" },
              { "name": "POSTGRES_PASSWORD", "value": "${{ secrets.POSTGRES_PASSWORD }}" },
              { "name": "POSTGRES_HOST", "value": "${{ secrets.POSTGRES_HOST }}" },
              { "name": "POSTGRES_PORT", "value": "${{ secrets.POSTGRES_PORT }}" },
              { "name": "POSTGRES_DB", "value": "${{ secrets.POSTGRES_DB }}" },
              { "name": "REDIS_URL", "value": "${{ secrets.REDIS_URL }}" },
              { "name": "PINECONE_API_KEY", "value": "${{ secrets.PINECONE_API_KEY }}" },
              { "name": "PINECONE_ENVIRONMENT", "value": "${{ secrets.PINECONE_ENVIRONMENT }}" },
              { "name": "AZURE_STORAGE_CONNECTION_STRING", "value": "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" },
              { "name": "LLM_API_KEY", "value": "${{ secrets.LLM_API_KEY }}" },
              { "name": "OPENAI_API_KEY", "value": "${{ secrets.OPENAI_API_KEY }}" },
              { "name": "OMNI_MEMORY_PROVIDER", "value": "${{ secrets.OMNI_MEMORY_PROVIDER }}" }
            ]'

