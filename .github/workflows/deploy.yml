name: Build, Push, and Deploy to Azure Container Apps

on:
  push:
    branches:
      - main

env:
  DOCKER_REPOSITORY: ${{ secrets.DOCKER_USERNAME }}
  # Placeholder for the latest tag used across all images
  IMAGE_TAG: ${{ github.run_number }} 
  # Azure Container App and Resource Group Configuration (Using your specified values)
  RESOURCE_GROUP: 'ai-tutor-rg' 
  ACA_HOST_NAME: 'mcp-host'       
  ACA_RAG_NAME: 'rag-mcp-server'      

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    
    # Define an output so the next job can check if this succeeded
    outputs:
      images_pushed: true
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 1: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # Step 2: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # --- Build and Push mcp-host image ---
      
      # Step 3: Build and push mcp-host
      - name: Build and Push mcp-host
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile.mcp_host
          push: true
          # The resulting image tag is: ${{ secrets.DOCKER_USERNAME }}/mcp-host:latest
          tags: ${{ env.DOCKER_REPOSITORY }}/mcp-host:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- Build and Push rag-server image ---
      
      # Step 4: Build and push rag-server
      - name: Build and Push rag-server
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile.rag_server
          push: true
          # The resulting image tag is: ${{ secrets.DOCKER_USERNAME }}/rag-server:latest
          tags: ${{ env.DOCKER_REPOSITORY }}/rag-server:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy_to_aca:
    runs-on: ubuntu-latest
    needs: build_and_push # Ensure this job only runs after the images are successfully pushed
    environment: Production # Recommended best practice for deployment
    
    steps:
      # Step 1: Login to Azure using Service Principal credentials (Requires AZURE_CREDENTIALS secret)
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      # Step 2: Deploy mcp-host image to Azure Container Apps
      - name: Deploy mcp-host to ACA
        uses: azure/container-apps-deploy-action@v1
        with:
          # Uses the image pushed in the previous job
          imageToDeploy: ${{ env.DOCKER_REPOSITORY }}/mcp-host:${{ env.IMAGE_TAG }}
          containerAppName: ${{ env.ACA_HOST_NAME }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          # Provide Docker Hub credentials for ACA to pull the image
          acrUsername: ${{ secrets.DOCKER_USERNAME }}
          acrPassword: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Deploy rag-server image to Azure Container Apps
      - name: Deploy rag-server to ACA
        uses: azure/container-apps-deploy-action@v1
        with:
          # Uses the image pushed in the previous job
          imageToDeploy: ${{ env.DOCKER_REPOSITORY }}/rag-server:${{ env.IMAGE_TAG }}
          containerAppName: ${{ env.ACA_RAG_NAME }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          # Provide Docker Hub credentials for ACA to pull the image
          acrUsername: ${{ secrets.DOCKER_USERNAME }}
          acrPassword: ${{ secrets.DOCKER_PASSWORD }}
          
      # Step 4: Logout of Azure
      - name: Azure Logout
        run: az logout
